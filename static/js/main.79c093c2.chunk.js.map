{"version":3,"sources":["Card.js","Config.js","App.js","serviceWorker.js","index.js"],"names":["Card","transformFactor","window","innerWidth","style","cardContainer","flexGrow","alignItems","display","card","position","margin","width","height","fontFamily","color","this","props","textColor","backgroundColor","borderRadius","boxShadow","overflow","transform","concat","arc","left","top","orgName","fontSize","fontWeight","maxWidth","textAlign","membershipPlan","bottomText","bottom","lineHeight","membershipNo","logo","right","react_default","a","createElement","organization","name","src","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","event","updateTheme","target","value","updateColor","setState","updateName","updateOrganization","updateMembershipNo","updateMembershipPlan","updateLogo","updateTextColor","console","log","className","type","onChange","bind","theme","selectedTheme","selectedColor","justifyContent","flexDirection","Config","src_Card","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA4FeA,mLAxFX,IAAIC,EAAuC,GAApBC,OAAOC,WAAoB,IAE5CC,EAAQ,CACZC,cAAe,CACbC,SAAU,EACVC,WAAY,SACZC,QAAS,QAEXC,KAAM,CACJC,SAAU,WACVC,OAAQ,SACRC,MAAO,IACPC,OAAQ,IACRC,WAAY,mBACZC,MAAgC,SAAzBC,KAAKC,MAAMC,UAAuB,kBAAoB,QAC7DC,gBAAiBH,KAAKC,MAAMF,MAC5BK,aAAc,GACdC,UAAW,4BACXC,SAAU,SACVC,UAAS,SAAAC,OAAWvB,EAAX,MAEXwB,IAAK,CACHb,MAAO,IACPC,OAAQ,IACRH,SAAU,WACVS,gBAAiB,kBACjBC,aAAc,MACdM,MAAO,IACPC,KAAM,KAERC,QAAS,CACPlB,SAAU,WACViB,IAAK,GACLD,KAAM,GACNG,SAAU,GACVC,WAAY,OACZC,SAAU,IACVC,UAAW,QAEbC,eAAgB,CACdJ,SAAU,GACVC,WAAY,UAEdI,WAAY,CACVxB,SAAU,WACVyB,OAAQ,GACRT,KAAM,GACNG,SAAU,GACVC,WAAY,SACZC,SAAU,IACVC,UAAW,OACXI,WAAY,KAEdC,aAAc,CACZP,WAAY,QAEdQ,KAAM,CACJ5B,SAAU,WACViB,IAAK,EACLQ,OAAQ,EACRI,MAAO,GACP5B,OAAQ,SACRoB,SAAU,IACVlB,OAAQ,OACRL,QAAS,UAGb,OACEgC,EAAAC,EAAAC,cAAA,OAAKtC,MAAOA,EAAMC,eAChBmC,EAAAC,EAAAC,cAAA,OAAKtC,MAAOA,EAAMK,MAChB+B,EAAAC,EAAAC,cAAA,OAAKtC,MAAOA,EAAMqB,MAClBe,EAAAC,EAAAC,cAAA,OAAKtC,MAAOA,EAAMwB,SACfZ,KAAKC,MAAM0B,aACZH,EAAAC,EAAAC,cAAA,OAAKtC,MAAOA,EAAM6B,gBAAiBjB,KAAKC,MAAMgB,iBAEhDO,EAAAC,EAAAC,cAAA,OAAKtC,MAAOA,EAAM8B,YAChBM,EAAAC,EAAAC,cAAA,OAAKtC,MAAOA,EAAMiC,cAAerB,KAAKC,MAAMoB,cAC5CG,EAAAC,EAAAC,cAAA,WAAM1B,KAAKC,MAAM2B,MACjBJ,EAAAC,EAAAC,cAAA,+BAGFF,EAAAC,EAAAC,cAAA,OAAKG,IAAK7B,KAAKC,MAAMqB,KAAMlC,MAAOA,EAAMkC,gBAnF/BQ,aC2FJC,qBAzFb,SAAAA,EAAY9B,GAAO,IAAA+B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjC,KAAA+B,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjC,KAAAiC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAArC,KAAMC,KACDqC,MAAQ,GAFIN,2EAKPO,GACVvC,KAAKC,MAAMuC,YAAYD,EAAME,OAAOC,2CAG1BH,GACVvC,KAAKC,MAAM0C,YAAYJ,EAAME,OAAOC,OACpC1C,KAAK4C,SAAS,CAAE7C,MAAOwC,EAAME,OAAOC,2CAG3BH,GACTvC,KAAKC,MAAM4C,WAAWN,EAAME,OAAOC,kDAGlBH,GACjBvC,KAAKC,MAAM6C,mBAAmBP,EAAME,OAAOC,kDAG1BH,GACjBvC,KAAKC,MAAM8C,mBAAmBR,EAAME,OAAOC,oDAGxBH,GACnBvC,KAAKC,MAAM+C,qBAAqBT,EAAME,OAAOC,0CAGpCH,GACTvC,KAAKC,MAAMgD,WAAWV,EAAME,OAAOC,+CAGrBH,GACdvC,KAAKC,MAAMiD,gBAAgBX,EAAME,OAAOC,OACxCS,QAAQC,IAAI,kDAOZ,OACE5B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,SAASjE,MAJN,CAClBE,SAAU,IAIRkC,EAAAC,EAAAC,cAAA,SACE4B,KAAK,OACLC,SAAUvD,KAAK6C,WAAWW,KAAKxD,MAC/B0C,MAAO1C,KAAKC,MAAM2B,OAEpBJ,EAAAC,EAAAC,cAAA,SACE4B,KAAK,OACLC,SAAUvD,KAAK8C,mBAAmBU,KAAKxD,MACvC0C,MAAO1C,KAAKC,MAAM0B,eAGpBH,EAAAC,EAAAC,cAAA,SACE4B,KAAK,OACLC,SAAUvD,KAAK+C,mBAAmBS,KAAKxD,MACvC0C,MAAO1C,KAAKC,MAAMoB,eAEpBG,EAAAC,EAAAC,cAAA,SACE4B,KAAK,OACLC,SAAUvD,KAAKgD,qBAAqBQ,KAAKxD,MACzC0C,MAAO1C,KAAKC,MAAMgB,iBAEpBO,EAAAC,EAAAC,cAAA,SACE4B,KAAK,OACLC,SAAUvD,KAAKiD,WAAWO,KAAKxD,MAC/B0C,MAAO1C,KAAKC,MAAMqB,OAGpBE,EAAAC,EAAAC,cAAA,SACE4B,KAAK,QACLC,SAAUvD,KAAK2C,YAAYa,KAAKxD,MAChC0C,MAAO1C,KAAKC,MAAMF,QAEpByB,EAAAC,EAAAC,cAAA,UACE6B,SAAUvD,KAAKkD,gBAAgBM,KAAKxD,MACpC0C,MAAO1C,KAAKC,MAAMC,WAElBsB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,SAAd,SACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,QAAd,iBAnFQZ,cC4GHC,cA1Gb,SAAAA,EAAY9B,GAAO,IAAA+B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjC,KAAA+B,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjC,KAAAiC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAArC,KAAMC,KACDqC,MAAQ,CACXV,KAAM,gBACNX,eAAgB,YAChBI,aAAc,YACdM,aAAc,oBACd8B,MAAO,EACP1D,MAAO,UACPG,UAAW,QACXoB,KACE,0GAXaU,2EAeP0B,GACV1D,KAAK4C,SAAS,CACZa,MAAOC,wCAICC,GACV3D,KAAK4C,SAAS,CACZ7C,MAAO4D,uCAIA/B,GACT5B,KAAK4C,SAAS,CACZhB,KAAMA,+CAISD,GACjB3B,KAAK4C,SAAS,CACZjB,aAAcA,+CAICN,GACjBrB,KAAK4C,SAAS,CACZvB,aAAcA,iDAIGJ,GACnBjB,KAAK4C,SAAS,CACZ3B,eAAgBA,uCAITK,GACTtB,KAAK4C,SAAS,CACZtB,KAAMA,4CAIMpB,GACdF,KAAK4C,SAAS,CACZ1C,UAAWA,qCAcb,OACEsB,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,MAAMjE,MAVL,CAChBI,QAAS,OACTD,WAAY,SACZqE,eAAgB,SAChB/D,OAAQ,QACRD,MAAO,QACPiE,cAAe,WAKbrC,EAAAC,EAAAC,cAACoC,EAAD,CACEtB,YAAaxC,KAAKwC,YAAYgB,KAAKxD,MACnC2C,YAAa3C,KAAK2C,YAAYa,KAAKxD,MACnC6C,WAAY7C,KAAK6C,WAAWW,KAAKxD,MACjC+C,mBAAoB/C,KAAK+C,mBAAmBS,KAAKxD,MACjDgD,qBAAsBhD,KAAKgD,qBAAqBQ,KAAKxD,MACrD8C,mBAAoB9C,KAAK8C,mBAAmBU,KAAKxD,MACjDiD,WAAYjD,KAAKiD,WAAWO,KAAKxD,MACjCkD,gBAAiBlD,KAAKkD,gBAAgBM,KAAKxD,MAC3CD,MAAOC,KAAKsC,MAAMvC,MAClB6B,KAAM5B,KAAKsC,MAAMV,KACjBX,eAAgBjB,KAAKsC,MAAMrB,eAC3BI,aAAcrB,KAAKsC,MAAMjB,aACzBM,aAAc3B,KAAKsC,MAAMX,aACzBL,KAAMtB,KAAKsC,MAAMhB,KACjBpB,UAAWF,KAAKsC,MAAMpC,YAExBsB,EAAAC,EAAAC,cAACqC,EAAD,CACEnC,KAAM5B,KAAKsC,MAAMV,KACjBX,eAAgBjB,KAAKsC,MAAMrB,eAC3BlB,MAAOC,KAAKsC,MAAMvC,MAClBsB,aAAcrB,KAAKsC,MAAMjB,aACzBM,aAAc3B,KAAKsC,MAAMX,aACzBL,KAAMtB,KAAKsC,MAAMhB,KACjBpB,UAAWF,KAAKsC,MAAMpC,oBApGd4B,aCQEkC,QACW,cAA7B9E,OAAO+E,SAASC,UAEe,UAA7BhF,OAAO+E,SAASC,UAEhBhF,OAAO+E,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.79c093c2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Card extends Component {\n  render() {\n    let transformFactor = (window.innerWidth * 0.6) / 375;\n\n    const style = {\n      cardContainer: {\n        flexGrow: 1,\n        alignItems: \"center\",\n        display: \"flex\"\n      },\n      card: {\n        position: \"relative\",\n        margin: \"0 auto\",\n        width: 375,\n        height: 215,\n        fontFamily: \"Muli, sans-serif\",\n        color: this.props.textColor === \"dark\" ? \"rgba(0,0,0,0.9)\" : \"white\",\n        backgroundColor: this.props.color,\n        borderRadius: 10,\n        boxShadow: \"0 0 2px 0 rgba(0,0,0,0.2)\",\n        overflow: \"hidden\",\n        transform: `scale(${transformFactor})`\n      },\n      arc: {\n        width: 590,\n        height: 490,\n        position: \"absolute\",\n        backgroundColor: \"rgba(0,0,0,0.1)\",\n        borderRadius: \"50%\",\n        left: -467,\n        top: -138\n      },\n      orgName: {\n        position: \"absolute\",\n        top: 24,\n        left: 32,\n        fontSize: 15,\n        fontWeight: \"bold\",\n        maxWidth: 155,\n        textAlign: \"left\"\n      },\n      membershipPlan: {\n        fontSize: 12,\n        fontWeight: \"normal\"\n      },\n      bottomText: {\n        position: \"absolute\",\n        bottom: 20,\n        left: 32,\n        fontSize: 12,\n        fontWeight: \"normal\",\n        maxWidth: 155,\n        textAlign: \"left\",\n        lineHeight: 1.5\n      },\n      membershipNo: {\n        fontWeight: \"bold\"\n      },\n      logo: {\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n        right: 32,\n        margin: \"auto 0\",\n        maxWidth: 140,\n        height: \"auto\",\n        display: \"block\"\n      }\n    };\n    return (\n      <div style={style.cardContainer}>\n        <div style={style.card}>\n          <div style={style.arc} />\n          <div style={style.orgName}>\n            {this.props.organization}\n            <div style={style.membershipPlan}>{this.props.membershipPlan}</div>\n          </div>\n          <div style={style.bottomText}>\n            <div style={style.membershipNo}>{this.props.membershipNo}</div>\n            <div>{this.props.name}</div>\n            <div>17 January 2020</div>\n          </div>\n\n          <img src={this.props.logo} style={style.logo} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  updateTheme(event) {\n    this.props.updateTheme(event.target.value);\n  }\n\n  updateColor(event) {\n    this.props.updateColor(event.target.value);\n    this.setState({ color: event.target.value });\n  }\n\n  updateName(event) {\n    this.props.updateName(event.target.value);\n  }\n\n  updateOrganization(event) {\n    this.props.updateOrganization(event.target.value);\n  }\n\n  updateMembershipNo(event) {\n    this.props.updateMembershipNo(event.target.value);\n  }\n\n  updateMembershipPlan(event) {\n    this.props.updateMembershipPlan(event.target.value);\n  }\n\n  updateLogo(event) {\n    this.props.updateLogo(event.target.value);\n  }\n\n  updateTextColor(event) {\n    this.props.updateTextColor(event.target.value);\n    console.log(\"color changed\");\n  }\n\n  render() {\n    const configStyle = {\n      flexGrow: 0\n    };\n    return (\n      <div className=\"config\" style={configStyle}>\n        <input\n          type=\"text\"\n          onChange={this.updateName.bind(this)}\n          value={this.props.name}\n        />\n        <input\n          type=\"text\"\n          onChange={this.updateOrganization.bind(this)}\n          value={this.props.organization}\n        />\n\n        <input\n          type=\"text\"\n          onChange={this.updateMembershipNo.bind(this)}\n          value={this.props.membershipNo}\n        />\n        <input\n          type=\"text\"\n          onChange={this.updateMembershipPlan.bind(this)}\n          value={this.props.membershipPlan}\n        />\n        <input\n          type=\"text\"\n          onChange={this.updateLogo.bind(this)}\n          value={this.props.logo}\n        />\n\n        <input\n          type=\"color\"\n          onChange={this.updateColor.bind(this)}\n          value={this.props.color}\n        />\n        <select\n          onChange={this.updateTextColor.bind(this)}\n          value={this.props.textColor}\n        >\n          <option value=\"light\">Light</option>\n          <option value=\"dark\">Dark</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport Config from \"./Config\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"Jack Hallahan\",\n      membershipPlan: \"Gold plan\",\n      membershipNo: \"M12345678\",\n      organization: \"Organization name\",\n      theme: 1,\n      color: \"#349fe4\",\n      textColor: \"light\",\n      logo:\n        \"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Logo_TV_2015.svg/1200px-Logo_TV_2015.svg.png\"\n    };\n  }\n\n  updateTheme(selectedTheme) {\n    this.setState({\n      theme: selectedTheme\n    });\n  }\n\n  updateColor(selectedColor) {\n    this.setState({\n      color: selectedColor\n    });\n  }\n\n  updateName(name) {\n    this.setState({\n      name: name\n    });\n  }\n\n  updateOrganization(organization) {\n    this.setState({\n      organization: organization\n    });\n  }\n\n  updateMembershipNo(membershipNo) {\n    this.setState({\n      membershipNo: membershipNo\n    });\n  }\n\n  updateMembershipPlan(membershipPlan) {\n    this.setState({\n      membershipPlan: membershipPlan\n    });\n  }\n\n  updateLogo(logo) {\n    this.setState({\n      logo: logo\n    });\n  }\n\n  updateTextColor(textColor) {\n    this.setState({\n      textColor: textColor\n    });\n  }\n\n  render() {\n    const pageStyle = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100vh\",\n      width: \"100vw\",\n      flexDirection: \"column\"\n    };\n\n    return (\n      <div className=\"App\" style={pageStyle}>\n        <Config\n          updateTheme={this.updateTheme.bind(this)}\n          updateColor={this.updateColor.bind(this)}\n          updateName={this.updateName.bind(this)}\n          updateMembershipNo={this.updateMembershipNo.bind(this)}\n          updateMembershipPlan={this.updateMembershipPlan.bind(this)}\n          updateOrganization={this.updateOrganization.bind(this)}\n          updateLogo={this.updateLogo.bind(this)}\n          updateTextColor={this.updateTextColor.bind(this)}\n          color={this.state.color}\n          name={this.state.name}\n          membershipPlan={this.state.membershipPlan}\n          membershipNo={this.state.membershipNo}\n          organization={this.state.organization}\n          logo={this.state.logo}\n          textColor={this.state.textColor}\n        />\n        <Card\n          name={this.state.name}\n          membershipPlan={this.state.membershipPlan}\n          color={this.state.color}\n          membershipNo={this.state.membershipNo}\n          organization={this.state.organization}\n          logo={this.state.logo}\n          textColor={this.state.textColor}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}