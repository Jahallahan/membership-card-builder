{"version":3,"sources":["Card.js","Config.js","App.js","serviceWorker.js","index.js"],"names":["Card","style","card","background","this","props","color","overflow","sheen","backgroundImage","width","height","qrcode","padding","borderRadius","react_default","a","createElement","tilt_default","className","options","max","scale","theme","viewBox","fill","xmlns","fill-rule","clip-rule","d","secondaryColor","contentEditable","name","membershipNo","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","event","updateTheme","target","value","updateColor","setState","updateSecondaryColor","onChange","bind","type","membershipPlan","selectedTheme","selectedColor","Config","src_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05081d38.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Tilt from \"react-tilt\";\n\nclass Card extends Component {\n  render() {\n    const style = {\n      card: {\n        background: this.props.color,\n        overflow: \"Hidden\"\n      },\n      sheen: {\n        backgroundImage:\n          \"linear-gradient(315deg, rgba(255,255,255,0.3), transparent)\",\n        width: \"100%\",\n        height: \"100%\"\n      },\n      qrcode: {\n        width: \"100%\",\n        height: \"auto\",\n        padding: 40,\n        borderRadius: 10\n      }\n    };\n    return (\n      <Tilt\n        className=\"Tilt\"\n        options={{ max: 15, scale: 1 }}\n        style={{ height: 270, width: 428 }}\n      >\n        <div className=\"Tilt-inner\">\n          <div style={style.card} className={\"card theme\" + this.props.theme}>\n            <div style={style.sheen}>\n              <svg\n                width=\"428\"\n                height=\"270\"\n                viewBox=\"0 0 428 270\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  fill-rule=\"evenodd\"\n                  clip-rule=\"evenodd\"\n                  d=\"M19 75C52.6894 75 80 47.6894 80 14C80 9.1825 79.4415 4.49543 78.3858 0H428V270H0V71.9829C5.97944 73.941 12.3661 75 19 75Z\"\n                  fill={this.props.secondaryColor}\n                />\n\n                <path\n                  fill-rule=\"evenodd\"\n                  clip-rule=\"evenodd\"\n                  d=\"M428 61.8756C329.428 88.9878 252.891 169.299 231.2 270H428V61.8756Z\"\n                  fill=\"rgba(0,0,0,0.2)\"\n                />\n              </svg>\n\n              <span className=\"name\" contentEditable=\"true\">\n                {this.props.name}\n              </span>\n              {this.props.membershipNo && (\n                <span className=\"membership-no\" contentEditable=\"true\">\n                  M9381048\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </Tilt>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  updateTheme(event) {\n    this.props.updateTheme(event.target.value);\n  }\n\n  updateColor(event) {\n    this.props.updateColor(event.target.value);\n    this.setState({ color: event.target.value });\n  }\n\n  updateSecondaryColor(event) {\n    this.props.updateSecondaryColor(event.target.value);\n    this.setState({ secondaryColor: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"config\">\n        <select onChange={this.updateTheme.bind(this)}>\n          <option value=\"1\">Classic</option>\n          <option value=\"2\">Cool</option>\n          <option value=\"3\">Sophisticated</option>\n          <option value=\"4\">Warm</option>\n        </select>\n        <input\n          type=\"color\"\n          onChange={this.updateColor.bind(this)}\n          value={this.props.color}\n        />\n        <input\n          type=\"color\"\n          onChange={this.updateSecondaryColor.bind(this)}\n          value={this.props.secondaryColor}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport Config from \"./Config\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"Jack Hallahan\",\n      membershipPlan: \"Gold plan\",\n      theme: 1,\n      color: \"#349fe4\",\n      secondaryColor: \"#444444\",\n      membershipNo: true\n    };\n  }\n\n  updateTheme(selectedTheme) {\n    this.setState({\n      theme: selectedTheme\n    });\n  }\n\n  updateColor(selectedColor) {\n    this.setState({\n      color: selectedColor\n    });\n  }\n\n  updateSecondaryColor(selectedColor) {\n    this.setState({\n      secondaryColor: selectedColor\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Config\n          updateTheme={this.updateTheme.bind(this)}\n          updateColor={this.updateColor.bind(this)}\n          updateSecondaryColor={this.updateSecondaryColor.bind(this)}\n          color={this.state.color}\n          secondaryColor={this.state.secondaryColor}\n        />\n        <Card\n          name={this.state.name}\n          membershipPlan={this.state.membershipPlan}\n          theme={this.state.theme}\n          color={this.state.color}\n          secondaryColor={this.state.secondaryColor}\n          membershipNo={this.state.membershipNo}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}