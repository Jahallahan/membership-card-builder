{"version":3,"sources":["Card.js","Config.js","App.js","serviceWorker.js","index.js"],"names":["Card","style","card","position","width","height","fontFamily","color","this","props","textColor","margin","orgName","top","right","fontSize","fontWeight","maxWidth","textAlign","membershipPlan","bottomText","bottom","lineHeight","membershipNo","logo","left","display","react_default","a","createElement","xmlns","viewBox","fill","fill-rule","d","opacity","organization","name","src","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","event","updateTheme","target","value","updateColor","setState","updateName","updateOrganization","updateMembershipNo","updateMembershipPlan","updateLogo","updateTextColor","console","log","className","type","onChange","bind","theme","selectedTheme","selectedColor","Config","src_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81d9b747.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Card extends Component {\n  render() {\n    const style = {\n      card: {\n        position: \"relative\",\n        width: 375,\n        height: 215,\n        fontFamily: \"Muli, sans-serif\",\n        color: this.props.textColor === \"dark\" ? \"rgba(0,0,0,0.9)\" : \"white\",\n        margin: 50\n      },\n      orgName: {\n        position: \"absolute\",\n        top: 24,\n        right: 32,\n        fontSize: 15,\n        fontWeight: \"bold\",\n        maxWidth: 160,\n        textAlign: \"right\"\n      },\n      membershipPlan: {\n        fontSize: 12,\n        fontWeight: \"normal\"\n      },\n      bottomText: {\n        position: \"absolute\",\n        bottom: 20,\n        right: 32,\n        fontSize: 12,\n        fontWeight: \"normal\",\n        maxWidth: 160,\n        textAlign: \"right\",\n        lineHeight: 1.5\n      },\n      membershipNo: {\n        fontWeight: \"bold\"\n      },\n      logo: {\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n        left: 32,\n        margin: \"auto 0\",\n        maxWidth: 140,\n        height: \"auto\",\n        display: \"block\"\n      }\n    };\n    return (\n      <div style={style.card}>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"375\"\n          height=\"215\"\n          viewBox=\"0 0 375 215\"\n        >\n          <g fill=\"none\" fill-rule=\"evenodd\">\n            <path\n              fill={this.props.color}\n              d=\"M9.39 213.999c-5.178 0-9.39-4.215-9.39-9.395V9.396C0 4.216 4.212 0 9.39 0h356.221C370.788 0 375 4.215 375 9.396v195.209c0 5.18-4.212 9.395-9.389 9.395H9.39v-.001z\"\n            />\n\n            <path\n              fill=\"#E1E8ED\"\n              fill-rule=\"nonzero\"\n              d=\"M365.135 1C370.023 1 374 4.977 374 9.865v194.557c0 4.888-3.977 8.865-8.865 8.865H9.865c-4.888 0-8.865-3.977-8.865-8.865V9.865C1 4.977 4.977 1 9.865 1h355.27zm0-1H9.865C4.439 0 0 4.439 0 9.865v194.557c0 5.426 4.439 9.865 9.865 9.865h355.271c5.426 0 9.865-4.439 9.865-9.865V9.865C375 4.439 370.561 0 365.135 0z\"\n            />\n            <g>\n              <path\n                fill=\"#2F2E2D\"\n                d=\"M122.789 107.48c0 39.314-10.667 75.907-29.012 106.52H6.846A9.919 9.919 0 0 1 0 208.948V5.052A9.919 9.919 0 0 1 6.846 0h86.353c18.699 30.806 29.59 67.754 29.59 107.48z\"\n                opacity=\".1\"\n              />\n            </g>\n          </g>\n        </svg>\n        <div style={style.orgName}>\n          {this.props.organization}\n          <div style={style.membershipPlan}>{this.props.membershipPlan}</div>\n        </div>\n        <div style={style.bottomText}>\n          <div style={style.membershipNo}>{this.props.membershipNo}</div>\n          <div>{this.props.name}</div>\n          <div>17 January 2020</div>\n        </div>\n        <img src={this.props.logo} style={style.logo} />\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  updateTheme(event) {\n    this.props.updateTheme(event.target.value);\n  }\n\n  updateColor(event) {\n    this.props.updateColor(event.target.value);\n    this.setState({ color: event.target.value });\n  }\n\n  updateName(event) {\n    this.props.updateName(event.target.value);\n  }\n\n  updateOrganization(event) {\n    this.props.updateOrganization(event.target.value);\n  }\n\n  updateMembershipNo(event) {\n    this.props.updateMembershipNo(event.target.value);\n  }\n\n  updateMembershipPlan(event) {\n    this.props.updateMembershipPlan(event.target.value);\n  }\n\n  updateLogo(event) {\n    this.props.updateLogo(event.target.value);\n  }\n\n  updateTextColor(event) {\n    this.props.updateTextColor(event.target.value);\n    console.log(\"color changed\");\n  }\n\n  render() {\n    return (\n      <div className=\"config\">\n        <input\n          type=\"text\"\n          onChange={this.updateName.bind(this)}\n          value={this.props.name}\n        />\n        <input\n          type=\"text\"\n          onChange={this.updateOrganization.bind(this)}\n          value={this.props.organization}\n        />\n\n        <input\n          type=\"text\"\n          onChange={this.updateMembershipNo.bind(this)}\n          value={this.props.membershipNo}\n        />\n        <input\n          type=\"text\"\n          onChange={this.updateMembershipPlan.bind(this)}\n          value={this.props.membershipPlan}\n        />\n        <input\n          type=\"text\"\n          onChange={this.updateLogo.bind(this)}\n          value={this.props.logo}\n        />\n\n        <input\n          type=\"color\"\n          onChange={this.updateColor.bind(this)}\n          value={this.props.color}\n        />\n        <select\n          onChange={this.updateTextColor.bind(this)}\n          value={this.props.textColor}\n        >\n          <option value=\"light\">Light</option>\n          <option value=\"dark\">Dark</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport Config from \"./Config\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"Jack Hallahan\",\n      membershipPlan: \"Gold plan\",\n      membershipNo: \"M12345678\",\n      organization: \"Organization name\",\n      theme: 1,\n      color: \"#349fe4\",\n      textColor: \"light\",\n      logo:\n        \"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Logo_TV_2015.svg/1200px-Logo_TV_2015.svg.png\"\n    };\n  }\n\n  updateTheme(selectedTheme) {\n    this.setState({\n      theme: selectedTheme\n    });\n  }\n\n  updateColor(selectedColor) {\n    this.setState({\n      color: selectedColor\n    });\n  }\n\n  updateName(name) {\n    this.setState({\n      name: name\n    });\n  }\n\n  updateOrganization(organization) {\n    this.setState({\n      organization: organization\n    });\n  }\n\n  updateMembershipNo(membershipNo) {\n    this.setState({\n      membershipNo: membershipNo\n    });\n  }\n\n  updateMembershipPlan(membershipPlan) {\n    this.setState({\n      membershipPlan: membershipPlan\n    });\n  }\n\n  updateLogo(logo) {\n    this.setState({\n      logo: logo\n    });\n  }\n\n  updateTextColor(textColor) {\n    this.setState({\n      textColor: textColor\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Config\n          updateTheme={this.updateTheme.bind(this)}\n          updateColor={this.updateColor.bind(this)}\n          updateName={this.updateName.bind(this)}\n          updateMembershipNo={this.updateMembershipNo.bind(this)}\n          updateMembershipPlan={this.updateMembershipPlan.bind(this)}\n          updateOrganization={this.updateOrganization.bind(this)}\n          updateLogo={this.updateLogo.bind(this)}\n          updateTextColor={this.updateTextColor.bind(this)}\n          color={this.state.color}\n          name={this.state.name}\n          membershipPlan={this.state.membershipPlan}\n          membershipNo={this.state.membershipNo}\n          organization={this.state.organization}\n          logo={this.state.logo}\n          textColor={this.state.textColor}\n        />\n        <Card\n          name={this.state.name}\n          membershipPlan={this.state.membershipPlan}\n          color={this.state.color}\n          membershipNo={this.state.membershipNo}\n          organization={this.state.organization}\n          logo={this.state.logo}\n          textColor={this.state.textColor}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}